module.exports = {
	env: {
		browser: true,
		es2021: true,
		node: true,
	},
	extends: [
		'eslint:recommended',
		'plugin:@typescript-eslint/recommended',
		'plugin:vue/vue3-recommended',
		'@unocss',
	],
	overrides: [
		{
			env: {
				node: true,
			},
			files: [
				'.eslintrc.{js,cjs}',
			],
			parserOptions: {
				sourceType: 'script',
			},
		},
		{
			files: ['*.vue'],
			parser: 'vue-eslint-parser',
			parserOptions: {
				parser: '@typescript-eslint/parser',
			},
			rules: {
				'vue/block-order': ['error', { order: [ 'script', 'template', 'style' ] }],
				'vue/component-api-style': ['error', ['script-setup']],
				'vue/component-name-in-template-casing': ['error', 'PascalCase', { registeredComponentsOnly: false }],
				'vue/custom-event-name-casing': ['error', 'kebab-case', { ignores: ['/^[a-z]+(?:-[a-z]+)*:[a-z]+(?:-[a-z]+)*$/u'] }],
				'vue/define-macros-order': ['error', { order: ['defineOptions', 'defineProps', 'defineEmits', 'defineSlots'] }],
				'vue/html-indent': ['error', 'tab', { attribute: 1, baseIndent: 1, closeBracket: 0, alignAttributesVertically: true, ignores: [] }],
				'vue/html-self-closing': ['error', { html: { void: 'always', normal: 'any', component: 'always' }, svg: 'always', math: 'always' }],
				'vue/multi-word-component-names': 'off',
				'vue/next-tick-style': ['error', 'promise'],
				'vue/no-empty-component-block': 'error',
				'vue/no-required-prop-with-default': ['error', { autofix: false }],
				'vue/padding-line-between-blocks': ['error', 'always'],
				'vue/prefer-define-options': 'error',
				'vue/require-default-prop': 'off',
				'vue/require-macro-variable-name': ['error', { defineProps: 'props', defineEmits: 'emit', defineSlots: 'slots', useSlots: 'slots', useAttrs: 'attrs' }],
				'vue/require-typed-ref': 'error',
			},
		},
	],
	parserOptions: {
		ecmaVersion: 'latest',
		parser: '@typescript-eslint/parser',
		sourceType: 'module',
		extraFileExtensions: ['.vue'],
		project: './tsconfig.json',
	},
	plugins: [
		'@stylistic',
		'@typescript-eslint',
		'import',
		'vue',
	],
	ignorePatterns: [
		'*.min.*',
		'CHANGELOG.md',
		'dist',
		'LICENSE*',
		'output',
		'coverage',
		'public',
		'temp',
		'packages-lock.json',
		'pnpm-lock.yaml',
		'yarn.lock',
		'__snapshots__',
		'!.github',
		'!.vitepress',
		'!.vscode',
	],
	rules: {
		'import/order': [
			'error',
			{
				pathGroups: [{ pattern: '~/**', group: 'internal' }],
				groups: ['builtin', 'external', 'internal'],
				alphabetize: { order: 'asc', orderImportKind: 'desc', caseInsensitive: true },
			},
		],

		'@stylistic/comma-dangle': ['error', 'always-multiline'],
		'@stylistic/indent': ['error', 'tab'],
		'@stylistic/quote-props': ['error', 'as-needed'],
		'@stylistic/quotes': ['error', 'single'],
		'@stylistic/semi': ['error', 'never'],
		'@stylistic/space-before-function-paren': ['error', 'never'],
		'@typescript-eslint/array-type': ['error', { default: 'array' }],
		'@typescript-eslint/ban-ts-comment': 'off',
		'@typescript-eslint/ban-types': 'error',
		'@typescript-eslint/consistent-generic-constructors': ['error', 'constructor'],
		'@typescript-eslint/consistent-type-assertions': ['error', { assertionStyle: 'as', objectLiteralTypeAssertions: 'allow' }],
		'@typescript-eslint/consistent-type-definitions': ['error', 'interface'],
		'@typescript-eslint/consistent-type-exports': ['error', { fixMixedExportsWithInlineTypeSpecifier: false }],
		'@typescript-eslint/consistent-type-imports': ['error', { prefer: 'type-imports', disallowTypeAnnotations: true, fixStyle: 'separate-type-imports' }],
		'@typescript-eslint/no-confusing-non-null-assertion': 'error',
		'@typescript-eslint/no-explicit-any': 'off',
		'@typescript-eslint/no-inferrable-types': ['error', { ignoreParameters: false, ignoreProperties: false }],
		'@typescript-eslint/no-non-null-asserted-nullish-coalescing': 'error',
		'@typescript-eslint/no-non-null-asserted-optional-chain': 'error',
		'@typescript-eslint/no-redundant-type-constituents': 'error',
		'@typescript-eslint/no-unnecessary-boolean-literal-compare': 'error',
		'@typescript-eslint/no-unnecessary-type-arguments': 'error',
		'@typescript-eslint/no-unnecessary-type-assertion': 'error',
		'@typescript-eslint/no-unnecessary-type-constraint': 'error',
		'@typescript-eslint/no-unused-vars': ['error', { args: 'all', argsIgnorePattern: '^_' }],
		'@typescript-eslint/prefer-for-of': 'error',
		'@typescript-eslint/prefer-optional-chain': 'error',
		'@typescript-eslint/prefer-reduce-type-parameter': 'error',
		'@typescript-eslint/prefer-ts-expect-error': 'error',
		'@typescript-eslint/return-await': ['error', 'in-try-catch'],
		'no-return-await': 'off',
		'no-undef': 'off',
		'no-unused-vars': 'off',
	},
}
